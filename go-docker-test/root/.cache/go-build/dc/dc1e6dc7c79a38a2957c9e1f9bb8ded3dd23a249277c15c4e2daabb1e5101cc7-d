// Code generated by cmd/cgo; DO NOT EDIT.

//line /go/pkg/mod/gopkg.in/goracle.v2@v2.24.1/queue.go:1:1
// Copyright 2019 Tamás Gulácsi
//
//
// SPDX-License-Identifier: UPL-1.0 OR Apache-2.0

package goracle

/*
#include <stdlib.h>
#include "dpiImpl.h"
*/
import _ "unsafe"
import (
	"context"
	"sync"
	"time"
	"unsafe"

	errors "golang.org/x/xerrors"
)

const MsgIDLength = 16

var zeroMsgID [MsgIDLength]byte

// DefaultEnqOptions is the default set for NewQueue.
var DefaultEnqOptions = EnqOptions{
	Visibility:   VisibleImmediate,
	DeliveryMode: DeliverPersistent,
}

// DefaultDeqOptions is the default set for NewQueue.
var DefaultDeqOptions = DeqOptions{
	Mode:         DeqRemove,
	DeliveryMode: DeliverPersistent,
	Navigation:   NavFirst,
	Visibility:   VisibleImmediate,
	Wait:         30,
}

// Queue represents an Oracle Advanced Queue.
type Queue struct {
	conn              *conn
	dpiQueue          * /*line :44:21*/_Ctype_dpiQueue /*line :44:31*/
	PayloadObjectType ObjectType
	name              string

	mu    sync.Mutex
	props []* /*line :49:11*/_Ctype_dpiMsgProps /*line :49:24*/
}

// NewQueue creates a new Queue.
//
// WARNING: the connection given to it must not be closed before the Queue is closed!
// So use an sql.Conn for it.
func NewQueue(ctx context.Context, execer Execer, name string, payloadObjectTypeName string) (*Queue, error) {
	cx, err := DriverConn(ctx, execer)
	if err != nil {
		return nil, err
	}
	Q := Queue{conn: cx.(*conn), name: name}

	var payloadType * /*line :63:19*/_Ctype_dpiObjectType /*line :63:34*/
	if payloadObjectTypeName != "" {
		if Q.PayloadObjectType, err = Q.conn.GetObjectType(payloadObjectTypeName); err != nil {
			return nil, err
		} else {
			payloadType = Q.PayloadObjectType.dpiObjectType
		}
	}
	value := ( /*line :71:11*/_Cfunc_CString /*line :71:19*/)(name)
	if func() _Ctype_int{ _cgo0 := /*line :72:24*/Q.conn.dpiConn; var _cgo1 *_Ctype_char = /*line :72:40*/value; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(name)); _cgo3 := /*line :72:66*/payloadType; _cgoBase4 := /*line :72:79*/&Q.dpiQueue; _cgo4 := _cgoBase4; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo3, nil); _cgoCheckPointer(_cgoBase4, 0 == 0); return _Cfunc_dpiConn_newQueue(_cgo0, _cgo1, _cgo2, _cgo3, _cgo4); }() == ( /*line :72:95*/_Ciconst_DPI_FAILURE /*line :72:107*/) {
		err = errors.Errorf("newQueue %q: %w", name, Q.conn.drv.getError())
	}
	func() { _cgo0 := /*line :75:9*/unsafe.Pointer(value); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
	if err != nil {
		cx.Close()
		return nil, err
	}
	if err = Q.SetEnqOptions(DefaultEnqOptions); err != nil {
		cx.Close()
		Q.Close()
		return nil, err
	}
	if err = Q.SetDeqOptions(DefaultDeqOptions); err != nil {
		cx.Close()
		Q.Close()
		return nil, err
	}
	return &Q, nil
}

// Close the queue.
func (Q *Queue) Close() error {
	c, q := Q.conn, Q.dpiQueue
	Q.conn, Q.dpiQueue = nil, nil
	if q == nil {
		return nil
	}
	if func() _Ctype_int{ _cgo0 := /*line :100:24*/q; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiQueue_release(_cgo0); }() == ( /*line :100:30*/_Ciconst_DPI_FAILURE /*line :100:42*/) {
		return errors.Errorf("release: %w", c.getError())
	}
	return nil
}

// Name of the queue.
func (Q *Queue) Name() string { return Q.name }

// EnqOptions returns the queue's enqueue options in effect.
func (Q *Queue) EnqOptions() (EnqOptions, error) {
	var E EnqOptions
	var opts * /*line :112:12*/_Ctype_dpiEnqOptions /*line :112:27*/
	if func() _Ctype_int{ _cgo0 := /*line :113:30*/Q.dpiQueue; _cgoBase1 := /*line :113:42*/&opts; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiQueue_getEnqOptions(_cgo0, _cgo1); }() == ( /*line :113:52*/_Ciconst_DPI_FAILURE /*line :113:64*/) {
		return E, errors.Errorf("getEnqOptions: %w", Q.conn.drv.getError())
	}
	err := E.fromOra(Q.conn.drv, opts)
	return E, err
}

// DeqOptions returns the queue's dequeue options in effect.
func (Q *Queue) DeqOptions() (DeqOptions, error) {
	var D DeqOptions
	var opts * /*line :123:12*/_Ctype_dpiDeqOptions /*line :123:27*/
	if func() _Ctype_int{ _cgo0 := /*line :124:30*/Q.dpiQueue; _cgoBase1 := /*line :124:42*/&opts; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiQueue_getDeqOptions(_cgo0, _cgo1); }() == ( /*line :124:52*/_Ciconst_DPI_FAILURE /*line :124:64*/) {
		return D, errors.Errorf("getDeqOptions: %w", Q.conn.drv.getError())
	}
	err := D.fromOra(Q.conn.drv, opts)
	return D, err
}

// Dequeues messages into the given slice.
// Returns the number of messages filled in the given slice.
func (Q *Queue) Dequeue(messages []Message) (int, error) {
	Q.mu.Lock()
	defer Q.mu.Unlock()
	var props []* /*line :136:15*/_Ctype_dpiMsgProps /*line :136:28*/
	if cap(Q.props) >= len(messages) {
		props = Q.props[:len(messages)]
	} else {
		props = make([]* /*line :140:19*/_Ctype_dpiMsgProps /*line :140:32*/, len(messages))
	}
	Q.props = props

	var ok  /*line :144:9*/_Ctype_int /*line :144:14*/
	num :=  /*line :145:9*/_Ctype_uint /*line :145:15*/(len(props))
	if num == 1 {
		ok = func() _Ctype_int{ _cgo0 := /*line :147:26*/Q.dpiQueue; _cgoIndex1 := &/*line :147:39*/props; _cgo1 := /*line :147:38*/&(*_cgoIndex1)[0]; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, *_cgoIndex1); return _Cfunc_dpiQueue_deqOne(_cgo0, _cgo1); }()
	} else {
		ok = func() _Ctype_int{ _cgo0 := /*line :149:27*/Q.dpiQueue; var _cgo1 *_Ctype_uint32_t = /*line :149:39*/&num; _cgoIndex2 := &/*line :149:46*/props; _cgo2 := /*line :149:45*/&(*_cgoIndex2)[0]; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, *_cgoIndex2); return _Cfunc_dpiQueue_deqMany(_cgo0, _cgo1, _cgo2); }()
	}
	if ok == ( /*line :151:11*/_Ciconst_DPI_FAILURE /*line :151:23*/) {
		err := Q.conn.getError()
		if code := err.(interface{ Code() int }).Code(); code == 3156 {
			return 0, context.DeadlineExceeded
		}
		return 0, errors.Errorf("dequeue: %w", err)
	}
	var firstErr error
	for i, p := range props[:int(num)] {
		if err := messages[i].fromOra(Q.conn, p, &Q.PayloadObjectType); err != nil {
			if firstErr == nil {
				firstErr = err
			}
		}
		func() _Ctype_int{ _cgo0 := /*line :165:25*/p; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_release(_cgo0); }()
	}
	return int(num), firstErr
}

// Enqueue all the messages given.
//
// WARNING: calling this function in parallel on different connections acquired from the same pool may fail due to Oracle bug 29928074. Ensure that this function is not run in parallel, use standalone connections or connections from different pools, or make multiple calls to Queue.enqOne() instead. The function Queue.Dequeue() call is not affected.
func (Q *Queue) Enqueue(messages []Message) error {
	Q.mu.Lock()
	defer Q.mu.Unlock()
	var props []* /*line :176:15*/_Ctype_dpiMsgProps /*line :176:28*/
	if cap(Q.props) >= len(messages) {
		props = Q.props[:len(messages)]
	} else {
		props = make([]* /*line :180:19*/_Ctype_dpiMsgProps /*line :180:32*/, len(messages))
	}
	Q.props = props
	defer func() {
		for _, p := range props {
			if p != nil {
				func() _Ctype_int{ _cgo0 := /*line :186:27*/p; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_release(_cgo0); }()
			}
		}
	}()
	for i, m := range messages {
		if func() _Ctype_int{ _cgo0 := /*line :191:28*/Q.conn.dpiConn; _cgoIndex1 := &/*line :191:45*/props; _cgo1 := /*line :191:44*/&(*_cgoIndex1)[i]; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, *_cgoIndex1); return _Cfunc_dpiConn_newMsgProps(_cgo0, _cgo1); }() == ( /*line :191:58*/_Ciconst_DPI_FAILURE /*line :191:70*/) {
			return errors.Errorf("newMsgProps: %w", Q.conn.getError())
		}
		if err := m.toOra(Q.conn.drv, props[i]); err != nil {
			return err
		}
	}

	var ok  /*line :199:9*/_Ctype_int /*line :199:14*/
	if len(messages) == 1 {
		ok = func() _Ctype_int{ _cgo0 := /*line :201:26*/Q.dpiQueue; _cgo1 := /*line :201:38*/props[0]; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_dpiQueue_enqOne(_cgo0, _cgo1); }()
	} else {
		ok = func() _Ctype_int{ _cgo0 := /*line :203:27*/Q.dpiQueue; var _cgo1 _Ctype_uint32_t = _Ctype_uint(len(props)); _cgoIndex2 := &/*line :203:60*/props; _cgo2 := /*line :203:59*/&(*_cgoIndex2)[0]; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo2, *_cgoIndex2); return _Cfunc_dpiQueue_enqMany(_cgo0, _cgo1, _cgo2); }()
	}
	if ok == ( /*line :205:11*/_Ciconst_DPI_FAILURE /*line :205:23*/) {
		return errors.Errorf("enqueue %#v: %w", messages, Q.conn.getError())
	}

	return nil
}

// Message is a message - either received or being sent.
type Message struct {
	DeliveryMode            DeliveryMode
	Enqueued                time.Time
	Delay, Expiration       int32
	Priority, NumAttempts   int32
	Correlation, ExceptionQ string
	MsgID, OriginalMsgID    [16]byte
	State                   MessageState
	Raw                     []byte
	Object                  *Object
}

func (M *Message) toOra(d *drv, props * /*line :225:40*/_Ctype_dpiMsgProps /*line :225:53*/) error {
	var firstErr error
	OK := func(ok  /*line :227:16*/_Ctype_int /*line :227:21*/, name string) {
		if ok == ( /*line :228:12*/_Ciconst_DPI_SUCCESS /*line :228:24*/) {
			return
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", name, d.getError())
		}
	}
	if M.Correlation != "" {
		value := ( /*line :236:12*/_Cfunc_CString /*line :236:20*/)(M.Correlation)
		OK(func() _Ctype_int{ _cgo0 := /*line :237:35*/props; var _cgo1 *_Ctype_char = /*line :237:42*/value; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(M.Correlation)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setCorrelation(_cgo0, _cgo1, _cgo2); }(), "setCorrelation")
		func() { _cgo0 := /*line :238:10*/unsafe.Pointer(value); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
	}

	if M.Delay != 0 {
		OK(func() _Ctype_int{ _cgo0 := /*line :242:29*/props; var _cgo1 _Ctype_int32_t = _Ctype_int(M.Delay); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setDelay(_cgo0, _cgo1); }(), "setDelay")
	}

	if M.ExceptionQ != "" {
		value := ( /*line :246:12*/_Cfunc_CString /*line :246:20*/)(M.ExceptionQ)
		OK(func() _Ctype_int{ _cgo0 := /*line :247:34*/props; var _cgo1 *_Ctype_char = /*line :247:41*/value; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(M.ExceptionQ)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setExceptionQ(_cgo0, _cgo1, _cgo2); }(), "setExceptionQ")
		func() { _cgo0 := /*line :248:10*/unsafe.Pointer(value); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
	}

	if M.Expiration != 0 {
		OK(func() _Ctype_int{ _cgo0 := /*line :252:34*/props; var _cgo1 _Ctype_int32_t = _Ctype_int(M.Expiration); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setExpiration(_cgo0, _cgo1); }(), "setExpiration")
	}

	if M.OriginalMsgID != zeroMsgID {
		OK(func() _Ctype_int{ _cgo0 := /*line :256:37*/props; var _cgo1 *_Ctype_char = /*line :256:44*/(*_Ctype_char)(unsafe.Pointer(&M.OriginalMsgID[0])); var _cgo2 _Ctype_uint32_t = /*line :256:92*/MsgIDLength; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setOriginalMsgId(_cgo0, _cgo1, _cgo2); }(), "setMsgOriginalId")
	}

	OK(func() _Ctype_int{ _cgo0 := /*line :259:31*/props; var _cgo1 _Ctype_int32_t = _Ctype_int(M.Priority); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setPriority(_cgo0, _cgo1); }(), "setPriority")

	if M.Object == nil {
		OK(func() _Ctype_int{ _cgo0 := /*line :262:36*/props; var _cgo1 *_Ctype_char = /*line :262:43*/(*_Ctype_char)(unsafe.Pointer(&M.Raw[0])); var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(M.Raw)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_setPayloadBytes(_cgo0, _cgo1, _cgo2); }(), "setPayloadBytes")
	} else {
		OK(func() _Ctype_int{ _cgo0 := /*line :264:37*/props; _cgo1 := /*line :264:44*/M.Object.dpiObject; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_dpiMsgProps_setPayloadObject(_cgo0, _cgo1); }(), "setPayloadObject")
	}

	return firstErr
}

func (M *Message) fromOra(c *conn, props * /*line :270:43*/_Ctype_dpiMsgProps /*line :270:56*/, objType *ObjectType) error {
	var firstErr error
	OK := func(ok  /*line :272:16*/_Ctype_int /*line :272:21*/, name string) bool {
		if ok == ( /*line :273:12*/_Ciconst_DPI_SUCCESS /*line :273:24*/) {
			return true
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", name, c.getError())
		}
		return false
	}
	M.NumAttempts = 0
	var cint  /*line :282:11*/_Ctype_int /*line :282:16*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :283:37*/props; var _cgo1 *_Ctype_int32_t = /*line :283:44*/&cint; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getNumAttempts(_cgo0, _cgo1); }(), "getNumAttempts") {
		M.NumAttempts = int32(cint)
	}
	var value * /*line :286:13*/_Ctype_char /*line :286:19*/
	var length  /*line :287:13*/_Ctype_uint /*line :287:19*/
	M.Correlation = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :289:37*/props; _cgoBase1 := /*line :289:44*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :289:52*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiMsgProps_getCorrelation(_cgo0, _cgo1, _cgo2); }(), "getCorrelation") {
		M.Correlation = ( /*line :290:19*/_Cfunc_GoStringN /*line :290:29*/)(value,  /*line :290:38*/_Ctype_int /*line :290:43*/(length))
	}

	M.Delay = 0
	if OK(func() _Ctype_int{ _cgo0 := /*line :294:31*/props; var _cgo1 *_Ctype_int32_t = /*line :294:38*/&cint; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getDelay(_cgo0, _cgo1); }(), "getDelay") {
		M.Delay = int32(cint)
	}

	M.DeliveryMode = DeliverPersistent
	var mode  /*line :299:11*/_Ctype_dpiMessageDeliveryMode /*line :299:35*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :300:38*/props; var _cgo1 *_Ctype_dpiMessageDeliveryMode = /*line :300:45*/&mode; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getDeliveryMode(_cgo0, _cgo1); }(), "getDeliveryMode") {
		M.DeliveryMode = DeliveryMode(mode)
	}

	M.ExceptionQ = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :305:36*/props; _cgoBase1 := /*line :305:43*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :305:51*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiMsgProps_getExceptionQ(_cgo0, _cgo1, _cgo2); }(), "getExceptionQ") {
		M.ExceptionQ = ( /*line :306:18*/_Cfunc_GoStringN /*line :306:28*/)(value,  /*line :306:37*/_Ctype_int /*line :306:42*/(length))
	}

	var ts  /*line :309:9*/_Ctype_dpiTimestamp /*line :309:23*/
	M.Enqueued = time.Time{}
	if OK(func() _Ctype_int{ _cgo0 := /*line :311:33*/props; var _cgo1 *_Ctype_struct___19 = /*line :311:40*/&ts; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getEnqTime(_cgo0, _cgo1); }(), "getEnqTime") {
		tz := c.timeZone
		if ts.tzHourOffset != 0 || ts.tzMinuteOffset != 0 {
			tz = timeZoneFor(ts.tzHourOffset, ts.tzMinuteOffset)
		}
		if tz == nil {
			tz = time.Local
		}
		M.Enqueued = time.Date(
			int(ts.year), time.Month(ts.month), int(ts.day),
			int(ts.hour), int(ts.minute), int(ts.second), int(ts.fsecond),
			tz,
		)
	}

	M.Expiration = 0
	if OK(func() _Ctype_int{ _cgo0 := /*line :327:36*/props; var _cgo1 *_Ctype_int32_t = /*line :327:43*/&cint; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getExpiration(_cgo0, _cgo1); }(), "getExpiration") {
		M.Expiration = int32(cint)
	}

	M.MsgID = zeroMsgID
	if OK(func() _Ctype_int{ _cgo0 := /*line :332:31*/props; _cgoBase1 := /*line :332:38*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :332:46*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiMsgProps_getMsgId(_cgo0, _cgo1, _cgo2); }(), "getMsgId") {
		n :=  /*line :333:8*/_Ctype_int /*line :333:13*/(length)
		if n > MsgIDLength {
			n = MsgIDLength
		}
		copy(M.MsgID[:], (*((*[1 << 30]byte)(unsafe.Pointer(&value))))[:n:n])
	}

	M.OriginalMsgID = zeroMsgID
	if OK(func() _Ctype_int{ _cgo0 := /*line :341:39*/props; _cgoBase1 := /*line :341:46*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :341:54*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiMsgProps_getOriginalMsgId(_cgo0, _cgo1, _cgo2); }(), "getMsgOriginalId") {
		n :=  /*line :342:8*/_Ctype_int /*line :342:13*/(length)
		if n > MsgIDLength {
			n = MsgIDLength
		}
		copy(M.OriginalMsgID[:], (*((*[1 << 30]byte)(unsafe.Pointer(&value))))[:n:n])
	}

	M.Priority = 0
	if OK(func() _Ctype_int{ _cgo0 := /*line :350:34*/props; var _cgo1 *_Ctype_int32_t = /*line :350:41*/&cint; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getPriority(_cgo0, _cgo1); }(), "getPriority") {
		M.Priority = int32(cint)
	}

	M.State = 0
	var state  /*line :355:12*/_Ctype_dpiMessageState /*line :355:29*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :356:31*/props; var _cgo1 *_Ctype_dpiMessageState = /*line :356:38*/&state; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiMsgProps_getState(_cgo0, _cgo1); }(), "getState") {
		M.State = MessageState(state)
	}

	M.Raw = nil
	M.Object = nil
	var obj * /*line :362:11*/_Ctype_dpiObject /*line :362:22*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :363:33*/props; _cgoBase1 := /*line :363:40*/&obj; _cgo1 := _cgoBase1; _cgoBase2 := /*line :363:46*/&value; _cgo2 := _cgoBase2; var _cgo3 *_Ctype_uint32_t = /*line :363:54*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); _cgoCheckPointer(_cgoBase2, 0 == 0); return _Cfunc_dpiMsgProps_getPayload(_cgo0, _cgo1, _cgo2, _cgo3); }(), "getPayload") {
		if obj == nil {
			M.Raw = append(make([]byte, 0, length), ((*[1 << 30]byte)(unsafe.Pointer(value)))[:int(length):int(length)]...)
		} else {
			if func() _Ctype_int{ _cgo0 := /*line :367:26*/obj; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiObject_addRef(_cgo0); }() == ( /*line :367:34*/_Ciconst_DPI_FAILURE /*line :367:46*/) {
				return objType.getError()
			}
			M.Object = &Object{dpiObject: obj, ObjectType: *objType}
		}
	}
	return nil
}

// EnqOptions are the options used to enqueue a message.
type EnqOptions struct {
	Transformation string
	Visibility     Visibility
	DeliveryMode   DeliveryMode
}

func (E *EnqOptions) fromOra(d *drv, opts * /*line :383:44*/_Ctype_dpiEnqOptions /*line :383:59*/) error {
	var firstErr error
	OK := func(ok  /*line :385:16*/_Ctype_int /*line :385:21*/, msg string) bool {
		if ok == ( /*line :386:12*/_Ciconst_DPI_SUCCESS /*line :386:24*/) {
			return true
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", msg, d.getError())
		}
		return false
	}

	E.DeliveryMode = DeliverPersistent

	var value * /*line :397:13*/_Ctype_char /*line :397:19*/
	var length  /*line :398:13*/_Ctype_uint /*line :398:19*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :399:42*/opts; _cgoBase1 := /*line :399:48*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :399:56*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiEnqOptions_getTransformation(_cgo0, _cgo1, _cgo2); }(), "getTransformation") {
		E.Transformation = ( /*line :400:22*/_Cfunc_GoStringN /*line :400:32*/)(value,  /*line :400:41*/_Ctype_int /*line :400:46*/(length))
	}

	var vis  /*line :403:10*/_Ctype_dpiVisibility /*line :403:25*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :404:38*/opts; var _cgo1 *_Ctype_dpiVisibility = /*line :404:44*/&vis; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiEnqOptions_getVisibility(_cgo0, _cgo1); }(), "getVisibility") {
		E.Visibility = Visibility(vis)
	}

	return firstErr
}

func (E EnqOptions) toOra(d *drv, opts * /*line :411:41*/_Ctype_dpiEnqOptions /*line :411:56*/) error {
	var firstErr error
	OK := func(ok  /*line :413:16*/_Ctype_int /*line :413:21*/, msg string) bool {
		if ok == ( /*line :414:12*/_Ciconst_DPI_SUCCESS /*line :414:24*/) {
			return true
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", msg, d.getError())
		}
		return false
	}

	OK(func() _Ctype_int{ _cgo0 := /*line :423:37*/opts; var _cgo1 _Ctype_dpiMessageDeliveryMode = _Ctype_dpiMessageDeliveryMode(E.DeliveryMode); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiEnqOptions_setDeliveryMode(_cgo0, _cgo1); }(), "setDeliveryMode")
	cs := ( /*line :424:8*/_Cfunc_CString /*line :424:16*/)(E.Transformation)
	OK(func() _Ctype_int{ _cgo0 := /*line :425:39*/opts; var _cgo1 *_Ctype_char = /*line :425:45*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(E.Transformation)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiEnqOptions_setTransformation(_cgo0, _cgo1, _cgo2); }(), "setTransformation")
	func() { _cgo0 := /*line :426:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
	OK(func() _Ctype_int{ _cgo0 := /*line :427:35*/opts; var _cgo1 _Ctype_dpiVisibility = _Ctype_uint(E.Visibility); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiEnqOptions_setVisibility(_cgo0, _cgo1); }(), "setVisibility")
	return firstErr
}

// SetEnqOptions sets all the enqueue options
func (Q *Queue) SetEnqOptions(E EnqOptions) error {
	var opts * /*line :433:12*/_Ctype_dpiEnqOptions /*line :433:27*/
	if func() _Ctype_int{ _cgo0 := /*line :434:30*/Q.dpiQueue; _cgoBase1 := /*line :434:42*/&opts; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiQueue_getEnqOptions(_cgo0, _cgo1); }() == ( /*line :434:52*/_Ciconst_DPI_FAILURE /*line :434:64*/) {
		return errors.Errorf("getEnqOptions: %w", Q.conn.drv.getError())
	}
	return E.toOra(Q.conn.drv, opts)
}

// DeqOptions are the options used to dequeue a message.
type DeqOptions struct {
	Condition, Consumer, Correlation string
	MsgID, Transformation            string
	Mode                             DeqMode
	DeliveryMode                     DeliveryMode
	Navigation                       DeqNavigation
	Visibility                       Visibility
	Wait                             uint32
}

func (D *DeqOptions) fromOra(d *drv, opts * /*line :451:44*/_Ctype_dpiDeqOptions /*line :451:59*/) error {
	var firstErr error
	OK := func(ok  /*line :453:16*/_Ctype_int /*line :453:21*/, msg string) bool {
		if ok == ( /*line :454:12*/_Ciconst_DPI_SUCCESS /*line :454:24*/) {
			return true
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", msg, d.getError())
		}
		return false
	}

	var value * /*line :463:13*/_Ctype_char /*line :463:19*/
	var length  /*line :464:13*/_Ctype_uint /*line :464:19*/
	D.Transformation = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :466:42*/opts; _cgoBase1 := /*line :466:48*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :466:56*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiDeqOptions_getTransformation(_cgo0, _cgo1, _cgo2); }(), "getTransformation") {
		D.Transformation = ( /*line :467:22*/_Cfunc_GoStringN /*line :467:32*/)(value,  /*line :467:41*/_Ctype_int /*line :467:46*/(length))
	}
	D.Condition = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :470:37*/opts; _cgoBase1 := /*line :470:43*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :470:51*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiDeqOptions_getCondition(_cgo0, _cgo1, _cgo2); }(), "getCondifion") {
		D.Condition = ( /*line :471:17*/_Cfunc_GoStringN /*line :471:27*/)(value,  /*line :471:36*/_Ctype_int /*line :471:41*/(length))
	}
	D.Consumer = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :474:40*/opts; _cgoBase1 := /*line :474:46*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :474:54*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiDeqOptions_getConsumerName(_cgo0, _cgo1, _cgo2); }(), "getConsumer") {
		D.Consumer = ( /*line :475:16*/_Cfunc_GoStringN /*line :475:26*/)(value,  /*line :475:35*/_Ctype_int /*line :475:40*/(length))
	}
	D.Correlation = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :478:39*/opts; _cgoBase1 := /*line :478:45*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :478:53*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiDeqOptions_getCorrelation(_cgo0, _cgo1, _cgo2); }(), "getCorrelation") {
		D.Correlation = ( /*line :479:19*/_Cfunc_GoStringN /*line :479:29*/)(value,  /*line :479:38*/_Ctype_int /*line :479:43*/(length))
	}
	D.DeliveryMode = DeliverPersistent
	var mode  /*line :482:11*/_Ctype_dpiDeqMode /*line :482:23*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :483:32*/opts; var _cgo1 *_Ctype_dpiDeqMode = /*line :483:38*/&mode; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_getMode(_cgo0, _cgo1); }(), "getMode") {
		D.Mode = DeqMode(mode)
	}
	D.MsgID = ""
	if OK(func() _Ctype_int{ _cgo0 := /*line :487:33*/opts; _cgoBase1 := /*line :487:39*/&value; _cgo1 := _cgoBase1; var _cgo2 *_Ctype_uint32_t = /*line :487:47*/&length; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiDeqOptions_getMsgId(_cgo0, _cgo1, _cgo2); }(), "getMsgId") {
		D.MsgID = ( /*line :488:13*/_Cfunc_GoStringN /*line :488:23*/)(value,  /*line :488:32*/_Ctype_int /*line :488:37*/(length))
	}
	var nav  /*line :490:10*/_Ctype_dpiDeqNavigation /*line :490:28*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :491:38*/opts; var _cgo1 *_Ctype_dpiDeqNavigation = /*line :491:44*/&nav; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_getNavigation(_cgo0, _cgo1); }(), "getNavigation") {
		D.Navigation = DeqNavigation(nav)
	}
	var vis  /*line :494:10*/_Ctype_dpiVisibility /*line :494:25*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :495:38*/opts; var _cgo1 *_Ctype_dpiVisibility = /*line :495:44*/&vis; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_getVisibility(_cgo0, _cgo1); }(), "getVisibility") {
		D.Visibility = Visibility(vis)
	}
	D.Wait = 0
	var u32  /*line :499:10*/_Ctype_uint /*line :499:16*/
	if OK(func() _Ctype_int{ _cgo0 := /*line :500:32*/opts; var _cgo1 *_Ctype_uint32_t = /*line :500:38*/&u32; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_getWait(_cgo0, _cgo1); }(), "getWait") {
		D.Wait = uint32(u32)
	}
	return firstErr
}

func (D DeqOptions) toOra(d *drv, opts * /*line :506:41*/_Ctype_dpiDeqOptions /*line :506:56*/) error {
	var firstErr error
	OK := func(ok  /*line :508:16*/_Ctype_int /*line :508:21*/, msg string) bool {
		if ok == ( /*line :509:12*/_Ciconst_DPI_SUCCESS /*line :509:24*/) {
			return true
		}
		if firstErr == nil {
			firstErr = errors.Errorf("%s: %w", msg, d.getError())
		}
		return false
	}

	cs := ( /*line :518:8*/_Cfunc_CString /*line :518:16*/)(D.Transformation)
	OK(func() _Ctype_int{ _cgo0 := /*line :519:39*/opts; var _cgo1 *_Ctype_char = /*line :519:45*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(D.Transformation)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setTransformation(_cgo0, _cgo1, _cgo2); }(), "setTransformation")
	func() { _cgo0 := /*line :520:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()

	cs = ( /*line :522:7*/_Cfunc_CString /*line :522:15*/)(D.Condition)
	OK(func() _Ctype_int{ _cgo0 := /*line :523:34*/opts; var _cgo1 *_Ctype_char = /*line :523:40*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(D.Condition)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setCondition(_cgo0, _cgo1, _cgo2); }(), "setCondifion")
	func() { _cgo0 := /*line :524:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()

	cs = ( /*line :526:7*/_Cfunc_CString /*line :526:15*/)(D.Consumer)
	OK(func() _Ctype_int{ _cgo0 := /*line :527:37*/opts; var _cgo1 *_Ctype_char = /*line :527:43*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(D.Consumer)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setConsumerName(_cgo0, _cgo1, _cgo2); }(), "setConsumer")
	func() { _cgo0 := /*line :528:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()

	cs = ( /*line :530:7*/_Cfunc_CString /*line :530:15*/)(D.Correlation)
	OK(func() _Ctype_int{ _cgo0 := /*line :531:36*/opts; var _cgo1 *_Ctype_char = /*line :531:42*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(D.Correlation)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setCorrelation(_cgo0, _cgo1, _cgo2); }(), "setCorrelation")
	func() { _cgo0 := /*line :532:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()

	OK(func() _Ctype_int{ _cgo0 := /*line :534:37*/opts; var _cgo1 _Ctype_dpiMessageDeliveryMode = _Ctype_dpiMessageDeliveryMode(D.DeliveryMode); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setDeliveryMode(_cgo0, _cgo1); }(), "setDeliveryMode")
	OK(func() _Ctype_int{ _cgo0 := /*line :535:29*/opts; var _cgo1 _Ctype_dpiDeqMode = _Ctype_dpiDeqMode(D.Mode); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setMode(_cgo0, _cgo1); }(), "setMode")

	cs = ( /*line :537:7*/_Cfunc_CString /*line :537:15*/)(D.MsgID)
	OK(func() _Ctype_int{ _cgo0 := /*line :538:30*/opts; var _cgo1 *_Ctype_char = /*line :538:36*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(D.MsgID)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setMsgId(_cgo0, _cgo1, _cgo2); }(), "setMsgId")
	func() { _cgo0 := /*line :539:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()

	OK(func() _Ctype_int{ _cgo0 := /*line :541:35*/opts; var _cgo1 _Ctype_dpiDeqNavigation = _Ctype_dpiDeqNavigation(D.Navigation); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setNavigation(_cgo0, _cgo1); }(), "setNavigation")

	OK(func() _Ctype_int{ _cgo0 := /*line :543:35*/opts; var _cgo1 _Ctype_dpiVisibility = _Ctype_dpiVisibility(D.Visibility); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setVisibility(_cgo0, _cgo1); }(), "setVisibility")

	OK(func() _Ctype_int{ _cgo0 := /*line :545:29*/opts; var _cgo1 _Ctype_uint32_t = _Ctype_uint(D.Wait); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setWait(_cgo0, _cgo1); }(), "setWait")

	return firstErr
}

// SetDeqOptions sets all the dequeue options
func (Q *Queue) SetDeqOptions(D DeqOptions) error {
	var opts * /*line :552:12*/_Ctype_dpiDeqOptions /*line :552:27*/
	if func() _Ctype_int{ _cgo0 := /*line :553:30*/Q.dpiQueue; _cgoBase1 := /*line :553:42*/&opts; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiQueue_getDeqOptions(_cgo0, _cgo1); }() == ( /*line :553:52*/_Ciconst_DPI_FAILURE /*line :553:64*/) {
		return errors.Errorf("getDeqOptions: %w", Q.conn.drv.getError())
	}
	return D.toOra(Q.conn.drv, opts)
}

// SetDeqCorrelation is a convenience function setting the Correlation DeqOption
func (Q *Queue) SetDeqCorrelation(correlation string) error {
	var opts * /*line :561:12*/_Ctype_dpiDeqOptions /*line :561:27*/
	if func() _Ctype_int{ _cgo0 := /*line :562:30*/Q.dpiQueue; _cgoBase1 := /*line :562:42*/&opts; _cgo1 := _cgoBase1; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase1, 0 == 0); return _Cfunc_dpiQueue_getDeqOptions(_cgo0, _cgo1); }() == ( /*line :562:52*/_Ciconst_DPI_FAILURE /*line :562:64*/) {
		return errors.Errorf("getDeqOptions: %w", Q.conn.drv.getError())
	}
	cs := ( /*line :565:8*/_Cfunc_CString /*line :565:16*/)(correlation)
	ok := func() _Ctype_int{ _cgo0 := /*line :566:39*/opts; var _cgo1 *_Ctype_char = /*line :566:45*/cs; var _cgo2 _Ctype_uint32_t = _Ctype_uint(len(correlation)); _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiDeqOptions_setCorrelation(_cgo0, _cgo1, _cgo2); }() == ( /*line :566:78*/_Ciconst_DPI_FAILURE /*line :566:90*/)
	func() { _cgo0 := /*line :567:9*/unsafe.Pointer(cs); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
	if !ok {
		return errors.Errorf("setCorrelation: %w", Q.conn.drv.getError())
	}
	return nil
}

const (
	NoWait      = uint32(0)
	WaitForever = uint32(1<<31 - 1)
)

// MessageState constants representing message's state.
type MessageState uint32

const (
	// MsgStateReady says that "The message is ready to be processed".
	MsgStateReady = MessageState(( /*line :584:31*/_Ciconst_DPI_MSG_STATE_READY /*line :584:51*/))
	// MsgStateWaiting says that "The message is waiting for the delay time to expire".
	MsgStateWaiting = MessageState(( /*line :586:33*/_Ciconst_DPI_MSG_STATE_WAITING /*line :586:55*/))
	// MsgStateProcessed says that "The message has already been processed and is retained".
	MsgStateProcessed = MessageState(( /*line :588:35*/_Ciconst_DPI_MSG_STATE_PROCESSED /*line :588:59*/))
	// MsgStateExpired says that "The message has been moved to the exception queue".
	MsgStateExpired = MessageState(( /*line :590:33*/_Ciconst_DPI_MSG_STATE_EXPIRED /*line :590:55*/))
)

// DeliveryMode constants for delivery modes.
type DeliveryMode uint32

const (
	// DeliverPersistent is to Dequeue only persistent messages from the queue. This is the default mode.
	DeliverPersistent = DeliveryMode(( /*line :598:35*/_Ciconst_DPI_MODE_MSG_PERSISTENT /*line :598:59*/))
	// DeliverBuffered is to Dequeue only buffered messages from the queue.
	DeliverBuffered = DeliveryMode(( /*line :600:33*/_Ciconst_DPI_MODE_MSG_BUFFERED /*line :600:55*/))
	// DeliverPersistentOrBuffered is to Dequeue both persistent and buffered messages from the queue.
	DeliverPersistentOrBuffered = DeliveryMode(( /*line :602:45*/_Ciconst_DPI_MODE_MSG_PERSISTENT_OR_BUFFERED /*line :602:81*/))
)

// Visibility constants represents visibility.
type Visibility uint32

const (
	// VisibleImmediate means that "The message is not part of the current transaction but constitutes a transaction of its own".
	VisibleImmediate = Visibility(( /*line :610:32*/_Ciconst_DPI_VISIBILITY_IMMEDIATE /*line :610:57*/))
	// VisibleOnCommit means that "The message is part of the current transaction. This is the default value".
	VisibleOnCommit = Visibility(( /*line :612:31*/_Ciconst_DPI_VISIBILITY_ON_COMMIT /*line :612:56*/))
)

// DeqMode constants for dequeue modes.
type DeqMode uint32

const (
	// DeqRemove reads the message and updates or deletes it. This is the default mode. Note that the message may be retained in the queue table based on retention properties.
	DeqRemove = DeqMode(( /*line :620:22*/_Ciconst_DPI_MODE_DEQ_REMOVE /*line :620:42*/))
	// DeqBrows reads the message without acquiring a lock on the message (equivalent to a SELECT statement).
	DeqBrowse = DeqMode(( /*line :622:22*/_Ciconst_DPI_MODE_DEQ_BROWSE /*line :622:42*/))
	// DeqLocked reads the message and obtain a write lock on the message (equivalent to a SELECT FOR UPDATE statement).
	DeqLocked = DeqMode(( /*line :624:22*/_Ciconst_DPI_MODE_DEQ_LOCKED /*line :624:42*/))
	// DeqPeek confirms receipt of the message but does not deliver the actual message content.
	DeqPeek = DeqMode(( /*line :626:20*/_Ciconst_DPI_MODE_DEQ_REMOVE_NO_DATA /*line :626:48*/))
)

// DeqNavigation constants for navigation.
type DeqNavigation uint32

const (
	// NavFirst retrieves the first available message that matches the search criteria. This resets the position to the beginning of the queue.
	NavFirst = DeqNavigation(( /*line :634:27*/_Ciconst_DPI_DEQ_NAV_FIRST_MSG /*line :634:49*/))
	// NavNext skips the remainder of the current transaction group (if any) and retrieves the first message of the next transaction group. This option can only be used if message grouping is enabled for the queue.
	NavNextTran = DeqNavigation(( /*line :636:30*/_Ciconst_DPI_DEQ_NAV_NEXT_TRANSACTION /*line :636:59*/))
	// NavNext  	Retrieves the next available message that matches the search criteria. This is the default method.
	NavNext = DeqNavigation(( /*line :638:26*/_Ciconst_DPI_DEQ_NAV_NEXT_MSG /*line :638:47*/))
)
