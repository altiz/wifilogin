// Code generated by cmd/cgo; DO NOT EDIT.

//line /go/pkg/mod/gopkg.in/goracle.v2@v2.24.1/subscr.go:1:1
// Copyright 2017 Tamás Gulácsi
//
//
// SPDX-License-Identifier: UPL-1.0 OR Apache-2.0

package goracle

/*
#include <stdlib.h>
#include <stdio.h>
#include "dpiImpl.h"

void CallbackSubscrDebug(void *context, dpiSubscrMessage *message);

*/
import _ "unsafe"

import (
	"log"
	"strings"
	"unsafe"

	errors "golang.org/x/xerrors"
)

// CallbackSubscr is the callback for C code on subscription event.
//export CallbackSubscr
func CallbackSubscr(ctx unsafe.Pointer, message * /*line :28:50*/_Ctype_dpiSubscrMessage /*line :28:68*/) {
	log.Printf("CB %p %+v", ctx, message)
	if ctx == nil {
		return
	}
	subscr := (*Subscription)(ctx)

	getRows := func(rws * /*line :35:23*/_Ctype_dpiSubscrMessageRow /*line :35:44*/, rwsNum  /*line :35:53*/_Ctype_uint32_t /*line :35:63*/) []RowEvent {
		if rwsNum == 0 {
			return nil
		}
		cRws := (*((*[maxArraySize] /*line :39:30*/_Ctype_dpiSubscrMessageRow /*line :39:51*/)(unsafe.Pointer(rws))))[:int(rwsNum)]
		rows := make([]RowEvent, len(cRws))
		for i, row := range cRws {
			rows[i] = RowEvent{
				Operation: Operation(row.operation),
				Rowid:     ( /*line :44:16*/_Cfunc_GoStringN /*line :44:26*/)(row.rowid,  /*line :44:39*/_Ctype_int /*line :44:44*/(row.rowidLength)),
			}
		}
		return rows
	}
	getTables := func(tbls * /*line :49:26*/_Ctype_dpiSubscrMessageTable /*line :49:49*/, tblsNum  /*line :49:59*/_Ctype_uint32_t /*line :49:69*/) []TableEvent {
		if tblsNum == 0 {
			return nil
		}
		cTbls := (*((*[maxArraySize] /*line :53:31*/_Ctype_dpiSubscrMessageTable /*line :53:54*/)(unsafe.Pointer(tbls))))[:int(tblsNum)]
		tables := make([]TableEvent, len(cTbls))
		for i, tbl := range cTbls {
			tables[i] = TableEvent{
				Operation: Operation(tbl.operation),
				Name:      ( /*line :58:16*/_Cfunc_GoStringN /*line :58:26*/)(tbl.name,  /*line :58:38*/_Ctype_int /*line :58:43*/(tbl.nameLength)),
				Rows:      getRows(tbl.rows, tbl.numRows),
			}
		}
		return tables
	}
	getQueries := func(qrys * /*line :64:27*/_Ctype_dpiSubscrMessageQuery /*line :64:50*/, qrysNum  /*line :64:60*/_Ctype_uint32_t /*line :64:70*/) []QueryEvent {
		if qrysNum == 0 {
			return nil
		}
		cQrys := (*((*[maxArraySize] /*line :68:31*/_Ctype_dpiSubscrMessageQuery /*line :68:54*/)(unsafe.Pointer(qrys))))[:int(qrysNum)]
		queries := make([]QueryEvent, len(cQrys))
		for i, qry := range cQrys {
			queries[i] = QueryEvent{
				ID:        uint64(qry.id),
				Operation: Operation(qry.operation),
				Tables:    getTables(qry.tables, qry.numTables),
			}
		}
		return queries
	}
	var err error
	if message.errorInfo != nil {
		err = fromErrorInfo(*message.errorInfo)
	}

	subscr.callback(Event{
		Err:     err,
		Type:    EventType(message.eventType),
		DB:      ( /*line :87:12*/_Cfunc_GoStringN /*line :87:22*/)(message.dbName,  /*line :87:40*/_Ctype_int /*line :87:45*/(message.dbNameLength)),
		Tables:  getTables(message.tables, message.numTables),
		Queries: getQueries(message.queries, message.numQueries),
	})
}

// Event for a subscription.
type Event struct {
	Tables  []TableEvent
	Queries []QueryEvent
	DB      string
	Err     error
	Type    EventType
}

// QueryEvent is an event of a Query.
type QueryEvent struct {
	Tables []TableEvent
	ID     uint64
	Operation
}

// TableEvent is for a Table-related event.
type TableEvent struct {
	Rows []RowEvent
	Name string
	Operation
}

// RowEvent is for row-related event.
type RowEvent struct {
	Rowid string
	Operation
}

// Subscription for events in the DB.
type Subscription struct {
	conn      *conn
	dpiSubscr * /*line :125:13*/_Ctype_dpiSubscr /*line :125:24*/
	callback  func(Event)
}

func (s *Subscription) getError() error { return s.conn.getError() }

// NewSubscription creates a new Subscription in the DB.
//
// Make sure your user has CHANGE NOTIFICATION privilege!
//
// This code is EXPERIMENTAL yet!
func (c *conn) NewSubscription(name string, cb func(Event)) (*Subscription, error) {
	if !c.connParams.EnableEvents {
		return nil, errors.New("subscription must be allowed by specifying \"enableEvents=1\" in the connection parameters")
	}
	subscr := Subscription{conn: c, callback: cb}
	params := (* /*line :141:14*/_Ctype_dpiSubscrCreateParams /*line :141:37*/)(( /*line :141:39*/_Cfunc__CMalloc /*line :141:46*/)(( /*line :141:48*/_Ciconst_sizeof_dpiSubscrCreateParams /*line :141:77*/)))
	//defer func() { C.free(unsafe.Pointer(params)) }()
	func() _Ctype_int{ _cgo0 := /*line :143:38*/c.dpiContext; _cgo1 := /*line :143:52*/params; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_dpiContext_initSubscrCreateParams(_cgo0, _cgo1); }()
	params.subscrNamespace = ( /*line :144:27*/_Ciconst_DPI_SUBSCR_NAMESPACE_DBCHANGE /*line :144:57*/)
	params.protocol = ( /*line :145:20*/_Ciconst_DPI_SUBSCR_PROTO_CALLBACK /*line :145:46*/)
	params.qos = ( /*line :146:15*/_Ciconst_DPI_SUBSCR_QOS_BEST_EFFORT /*line :146:42*/) | ( /*line :146:46*/_Ciconst_DPI_SUBSCR_QOS_QUERY /*line :146:67*/) | ( /*line :146:71*/_Ciconst_DPI_SUBSCR_QOS_ROWIDS /*line :146:93*/)
	params.operations = ( /*line :147:22*/_Ciconst_DPI_OPCODE_ALL_OPS /*line :147:41*/)
	if name != "" {
		params.name = ( /*line :149:17*/_Cfunc_CString /*line :149:25*/)(name)
		params.nameLength =  /*line :150:23*/_Ctype_uint32_t /*line :150:33*/(len(name))
	}
	// typedef void (*dpiSubscrCallback)(void* context, dpiSubscrMessage *message);
	params.callback =  /*line :153:20*/_Ctype_dpiSubscrCallback /*line :153:39*/(( /*line :153:40*/_Cgo_ptr(_Cfpvar_fp_CallbackSubscrDebug) /*line :153:60*/))
	params.callbackContext = unsafe.Pointer(&subscr)

	dpiSubscr := (* /*line :156:17*/_Ctype_dpiSubscr /*line :156:28*/)(( /*line :156:30*/_Cfunc__CMalloc /*line :156:37*/)(( /*line :156:39*/_Ciconst_sizeof_void /*line :156:51*/)))

	if func() _Ctype_int{ _cgo0 := /*line :158:25*/c.dpiConn; _cgo1 := /*line :159:3*/params; _cgoBase2 := /*line :160:34*/&dpiSubscr; _cgo2 := /*line :160:3*/(**_Ctype_dpiSubscr)(unsafe.Pointer(_cgoBase2)); _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); _cgoCheckPointer(_cgoBase2, 0 == 0); return _Cfunc_dpiConn_subscribe(_cgo0, _cgo1, _cgo2); }() == ( /*line :161:7*/_Ciconst_DPI_FAILURE /*line :161:19*/) {
		func() { _cgo0 := /*line :162:10*/unsafe.Pointer(params); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
		func() { _cgo0 := /*line :163:10*/unsafe.Pointer(dpiSubscr); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }()
		err := errors.Errorf("newSubscription: %w", c.getError())
		if strings.Contains(errors.Unwrap(err).Error(), "DPI-1065:") {
			err = errors.Errorf("specify \"enableEvents=1\" connection parameter on connection to be able to use subscriptions: %w", err)
		}
		return nil, err
	}
	subscr.dpiSubscr = dpiSubscr
	return &subscr, nil
}

// Register a query for Change Notification.
//
// This code is EXPERIMENTAL yet!
func (s *Subscription) Register(qry string, params ...interface{}) error {
	cQry := ( /*line :178:10*/_Cfunc_CString /*line :178:18*/)(qry)
	defer func() { func() { _cgo0 := /*line :179:24*/unsafe.Pointer(cQry); _cgoCheckPointer(_cgo0, nil); _Cfunc_free(_cgo0); }() }()

	var dpiStmt * /*line :181:15*/_Ctype_dpiStmt /*line :181:24*/
	if func() _Ctype_int{ _cgo0 := /*line :182:29*/s.dpiSubscr; var _cgo1 *_Ctype_char = /*line :182:42*/cQry; var _cgo2 _Ctype_uint32_t = _Ctype_uint32_t(len(qry)); _cgoBase3 := /*line :182:70*/&dpiStmt; _cgo3 := _cgoBase3; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgoBase3, 0 == 0); return _Cfunc_dpiSubscr_prepareStmt(_cgo0, _cgo1, _cgo2, _cgo3); }() == ( /*line :182:83*/_Ciconst_DPI_FAILURE /*line :182:95*/) {
		return errors.Errorf("prepareStmt[%p]: %w", s.dpiSubscr, s.getError())
	}
	defer func() { func() _Ctype_int{ _cgo0 := /*line :185:35*/dpiStmt; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiStmt_release(_cgo0); }() }()

	mode :=  /*line :187:10*/_Ctype_dpiExecMode /*line :187:23*/(( /*line :187:24*/_Ciconst_DPI_MODE_EXEC_DEFAULT /*line :187:46*/))
	var qCols  /*line :188:12*/_Ctype_uint32_t /*line :188:22*/
	if func() _Ctype_int{ _cgo0 := /*line :189:23*/dpiStmt; var _cgo1 _Ctype_dpiExecMode = /*line :189:32*/mode; var _cgo2 *_Ctype_uint32_t = /*line :189:38*/&qCols; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiStmt_execute(_cgo0, _cgo1, _cgo2); }() == ( /*line :189:49*/_Ciconst_DPI_FAILURE /*line :189:61*/) {
		return errors.Errorf("executeStmt: %w", s.getError())
	}
	var queryID  /*line :192:14*/_Ctype_uint64_t /*line :192:24*/
	if func() _Ctype_int{ _cgo0 := /*line :193:32*/dpiStmt; var _cgo1 *_Ctype_uint64_t = /*line :193:41*/&queryID; _cgoCheckPointer(_cgo0, nil); return _Cfunc_dpiStmt_getSubscrQueryId(_cgo0, _cgo1); }() == ( /*line :193:54*/_Ciconst_DPI_FAILURE /*line :193:66*/) {
		return errors.Errorf("getSubscrQueryId: %w", s.getError())
	}
	if Log != nil {
		Log("msg", "subscribed", "query", qry, "id", queryID)
	}

	return nil
}

// Close the subscription.
//
// This code is EXPERIMENTAL yet!
func (s *Subscription) Close() error {
	dpiSubscr := s.dpiSubscr
	conn := s.conn
	s.conn = nil
	s.dpiSubscr = nil
	s.callback = nil
	if dpiSubscr == nil || conn == nil || conn.dpiConn == nil {
		return nil
	}
	if func() _Ctype_int{ _cgo0 := /*line :215:27*/conn.dpiConn; _cgo1 := /*line :215:41*/dpiSubscr; _cgoCheckPointer(_cgo0, nil); _cgoCheckPointer(_cgo1, nil); return _Cfunc_dpiConn_unsubscribe(_cgo0, _cgo1); }() == ( /*line :215:55*/_Ciconst_DPI_FAILURE /*line :215:67*/) {
		return errors.Errorf("close: %w", s.getError())
	}
	return nil
}

// EventType is the type of an event.
type EventType  /*line :222:16*/_Ctype_dpiEventType /*line :222:30*/

// Events that can be watched.
const (
	EvtStartup     = EventType(( /*line :226:29*/_Ciconst_DPI_EVENT_STARTUP /*line :226:47*/))
	EvtShutdown    = EventType(( /*line :227:29*/_Ciconst_DPI_EVENT_SHUTDOWN /*line :227:48*/))
	EvtShutdownAny = EventType(( /*line :228:29*/_Ciconst_DPI_EVENT_SHUTDOWN_ANY /*line :228:52*/))
	EvtDereg       = EventType(( /*line :229:29*/_Ciconst_DPI_EVENT_DEREG /*line :229:45*/))
	EvtObjChange   = EventType(( /*line :230:29*/_Ciconst_DPI_EVENT_OBJCHANGE /*line :230:49*/))
	EvtQueryChange = EventType(( /*line :231:29*/_Ciconst_DPI_EVENT_QUERYCHANGE /*line :231:51*/))
	EvtAQ          = EventType(( /*line :232:29*/_Ciconst_DPI_EVENT_AQ /*line :232:42*/))
)

// Operation in the DB.
type Operation  /*line :236:16*/_Ctype_dpiOpCode /*line :236:27*/

const (
	// OpAll Indicates that notifications should be sent for all operations on the table or query.
	OpAll = Operation(( /*line :240:20*/_Ciconst_DPI_OPCODE_ALL_OPS /*line :240:39*/))
	// OpAllRows Indicates that all rows have been changed in the table or query (or too many rows were changed or row information was not requested).
	OpAllRows = Operation(( /*line :242:24*/_Ciconst_DPI_OPCODE_ALL_ROWS /*line :242:44*/))
	// OpInsert Indicates that an insert operation has taken place in the table or query.
	OpInsert = Operation(( /*line :244:23*/_Ciconst_DPI_OPCODE_INSERT /*line :244:41*/))
	// OpUpdate Indicates that an update operation has taken place in the table or query.
	OpUpdate = Operation(( /*line :246:23*/_Ciconst_DPI_OPCODE_UPDATE /*line :246:41*/))
	// OpDelete Indicates that a delete operation has taken place in the table or query.
	OpDelete = Operation(( /*line :248:23*/_Ciconst_DPI_OPCODE_DELETE /*line :248:41*/))
	// OpAlter Indicates that the registered table or query has been altered.
	OpAlter = Operation(( /*line :250:22*/_Ciconst_DPI_OPCODE_ALTER /*line :250:39*/))
	// OpDrop Indicates that the registered table or query has been dropped.
	OpDrop = Operation(( /*line :252:21*/_Ciconst_DPI_OPCODE_DROP /*line :252:37*/))
	// OpUnknown An unknown operation has taken place.
	OpUnknown = Operation(( /*line :254:24*/_Ciconst_DPI_OPCODE_UNKNOWN /*line :254:43*/))
)
