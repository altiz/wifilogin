package handlers

import (
	"net/http"
	_ "wifilogin/cmd/wifilogin/docs" // docs is generated by Swag CLI, you have to import it.
	"wifilogin/cmd/wifilogin/models"

	logs "github.com/sirupsen/logrus"

	"database/sql"
	"strconv"

	"github.com/gin-gonic/gin"
	// swagger embed files

	_ "github.com/godror/godror"
)

type id struct {
	id int
}

type login struct {
	login  string
	passwd string
}

// set-msisdn godoc
// @Summary Сохраняет данные по делам в биллинговой системе
// @Description Передача данных по делам из Jeffit во внешнюю систему
// @Accept  json
// @Produce json
// Param [param_name] [param_type] [data_type] [required/mandatory] [description]
// @Param q body models.TDelo false "name search by q"
// @Success 200 {object} models.TData_resp
// @Router //set-msisdn/ [post]
func Setmsisdn(c *gin.Context) {

	var req models.Tlogin_req
	var resp models.Tlogin_resp
	logs.SetFormatter(&logs.JSONFormatter{})

	if err := c.ShouldBindJSON(&req); err != nil {
		//monitoring
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
	}

	logs.WithFields(logs.Fields{
		"Msisdn": req.Msisdn,
	}).Info("Request is accepted")

	db, err := sql.Open("godror", `user="wifiservice" password="wifi" connectString="e-scan:1521/irbis" poolMaxSessions=2000 poolIncrement=15 standaloneConnection=1`)
	db.SetMaxOpenConns(50)
	db.SetMaxIdleConns(0)
	defer db.Close()
	if err != nil {
		logs.WithFields(logs.Fields{
			"Msisdn": req.Msisdn,
		}).Info(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}

	logs.WithFields(logs.Fields{
		"DB": "e-scan:1521/irbis",
	}).Info("Session raised")

	rows, err := db.Query("select wifi_02_login_seq.nextval id from dual")
	if err != nil {
		logs.WithFields(logs.Fields{
			"Msisdn": req.Msisdn,
		}).Info(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}
	defer rows.Close()
	id := id{}
	rows.Next()
	err1 := rows.Scan(&id.id)
	if err1 != nil {
		logs.WithFields(logs.Fields{
			"Msisdn": req.Msisdn,
		}).Info(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}
	rows.Close()

	rows, err2 := db.Query("SELECT login, passwd FROM wifi_02_login_temp where id = " + strconv.Itoa(id.id))
	if err2 != nil {
		logs.WithFields(logs.Fields{
			"Msisdn": req.Msisdn,
		}).Info(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}

	logins := login{}
	rows.Next()
	err3 := rows.Scan(&logins.login, &logins.passwd)
	if err3 != nil {
		logs.WithFields(logs.Fields{
			"Msisdn": req.Msisdn,
		}).Info(err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
	}
	rows.Close()

	db.Exec("update wifi_02_login_temp set  bdate = sysdate,  msisdn = :1 where   id = :2", req.Msisdn, id.id)
	db.Close()

	defer db.Close()

	resp.Login = logins.login
	resp.Passwd = logins.passwd
	c.JSON(http.StatusOK, resp)

	logs.WithFields(logs.Fields{
		"login":  logins.login,
		"passwd": logins.passwd,
	}).Info("Response sent")
}
